{"version":3,"sources":["redux/actions/index.js","components/PokemonCard/PokemonCard.js","pages/Home/Home.js","pages/Details/Details.js","pages/Create/Create.js","pages/Landingpage/Landingpage.js","components/NavBar/NavBar.js","App.js","reportWebVitals.js","redux/reducer/index.js","redux/store/index.js","index.js"],"names":["GET_POKEMONS","GET_POKEMONS_ID","GET_POKEMONS_TYPES","POST_POKEMONS","LOADING","pokemonsTypes","dispatch","axios","get","response","type","payload","data","PokemonCard","name","id","img","to","className","src","alt","map","e","initialState","source","order","orderBy","page","Home","useState","filters","setFilters","useDispatch","useEffect","params","pokemons","useSelector","store","types","loading","handleFilters","event","property","target","value","onChange","newValue","split","placeholder","onKeyDown","key","onClick","class","length","i","Array","totalPages","fill","handlePage","Details","props","match","pokemonsId","pokemonDetail","hp","height","attack","defense","speed","weight","CreatePokemons","valoresNumeros","create","setCreate","update","includes","Number","areNumberValuesInvalid","areStringValuesInvalid","window","alert","focus","isNaN","isFormUnfilled","JSON","stringify","actions","onSubmit","post","preventDefault","htmlFor","style","width","required","min","max","for","String","Landingpage","NavBar","App","path","component","exact","Create","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","createdPokemon","rootReducer","state","action","composeEnhancers","__REDUX_DEVTOOLS_EXTENSION_COMPOSE__","compose","createStore","applyMiddleware","thunk","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.f6cb71db.chunk.js","sourcesContent":["import axios from \"axios\";\r\n// import { URLSearchParams } from \"url\";\r\n// aqui voy a llamar a mis rutas, aqui mi front va hacer la peticion al back para obtener la informacion\r\nexport const GET_POKEMONS = \"GET_POKEMONS\";\r\nexport const GET_POKEMONS_ID = \"GET_POKEMONS_ID\";\r\nexport const GET_POKEMONS_TYPES = \"GET_POKEMONS_TYPES\";\r\nexport const POST_POKEMONS = \"POST_POKEMONS\";\r\nexport const LOADING = \"LOADING\"\r\n\r\n\r\n\r\nexport const allPokemons = (params) => { //  params es el objeto del estado filters de home, que contiene la propiedad source\r\n    return async function (dispatch) {\r\n        dispatch({ type: LOADING, payload: true })\r\n        const response = await axios.get(\"http://localhost:3001/pokemons\", { params }); // aqui estoy trayendo la info, el arreglo de objetos de mis pokemones\r\n        dispatch({ type: GET_POKEMONS, payload: response.data }); // dispacth con un tipo que contiene a la accion y el payload que es mi info, se hace dispacth porque se quiere guardar la info en Store, donde esta el State\r\n        dispatch({ type: LOADING, payload: false })\r\n    };\r\n};\r\n\r\n\r\n\r\n\r\nexport const pokemonsId = (id) => {\r\n    return async function (dispatch) {\r\n        const response = await axios.get(`http://localhost:3001/pokemons/${id}`); // aqui estoy trayendo la info, el arreglo de objetos de mis pokemones\r\n        dispatch({ type: GET_POKEMONS_ID, payload: response.data }); // dispacth con un tipo que contiene a la accion y el payload que es mi info, se hace dispacth porque se quiere guardar la info en Store, donde esta el State\r\n    };\r\n};\r\n\r\n\r\n\r\n\r\nexport const pokemonsTypes = () => {\r\n\r\n    return async function (dispatch) {\r\n        const response = await axios.get(\"http://localhost:3001/types\"); // aqui estoy trayendo la info, el arreglo de objetos de mis pokemones\r\n        dispatch({ type: GET_POKEMONS_TYPES, payload: response.data }); // dispacth con un tipo que contiene a la accion y el payload que es mi info, se hace dispacth porque se quiere guardar la info en Store, donde esta el State\r\n    };\r\n};\r\n\r\n\r\n\r\n\r\nexport const createPokemons = (post) => { // estoy recibiendo el formulario \r\n\r\n    return async function (dispatch) {\r\n        const response = await axios.post('http://localhost:3001/pokemons', post); // el params.ToString va por defecto cada que use el dicho metodo\r\n        // const response = await axios.post(\"http://localhost:3001/pokemons\"); // aqui estoy trayendo la info, el arreglo de objetos de mis pokemones\r\n        dispatch({ type: POST_POKEMONS, payload: response.data }); // dispacth con un tipo que contiene a la accion y el payload que es mi info, se hace dispacth porque se quiere guardar la info en Store, donde esta el State\r\n\r\n\r\n    };\r\n\r\n\r\n\r\n};","\r\nimport React from \"react\";\r\nimport { Link } from \"react-router-dom\";\r\nimport \"./PokemonCard.css\"\r\n\r\nconst PokemonCard = ({ name, id, type, img }) => {\r\n\r\n\r\n    return (\r\n        <Link to={`/details/${id}`}>\r\n            <div className=\"pokemon-card\">\r\n                <div className=\"img-contain-pokemon\"> <img className=\"pokemon-card-img\" src={img} alt={name} /></div>\r\n\r\n                <h3>{name}</h3>\r\n                <div className=\"pokemon-types-card\">\r\n                    {\r\n                        type.map(e => <div className=\"each-type\">{e}</div>)\r\n                    }\r\n                </div>\r\n            </div>\r\n        </Link>\r\n    );\r\n};\r\n\r\n\r\nexport default PokemonCard;","import React, { useEffect, useState } from 'react'\r\nimport { useDispatch, useSelector } from \"react-redux\"; // se importa pq es el que me va a permitir llamar las acciones, quienes son las qe modifican el estado\r\nimport { allPokemons, pokemonsTypes } from '../../redux/actions';\r\nimport PokemonCard from '../../components/PokemonCard/PokemonCard';\r\nimport \"./home.css\";\r\n\r\nlet initialState = {\r\n    source: \"\",\r\n    name: \"\",\r\n    order: \"\",\r\n    orderBy: \"\",\r\n    type: \"\",\r\n    page: 1\r\n}\r\n\r\nfunction Home() {\r\n\r\n    const [filters, setFilters] = useState(initialState) // creando estado nuevo para los filtros, inicia vacio y se va llenando segun el usaruoi elija la opcion, es necesario el useState porque es el e  cargado de actualizar el componente, ESTADO LOCALLL\r\n\r\n    const dispatch = useDispatch(); //estoy guardando en la variable dispatch la funcion de UseDispacth para poder usarla, esto siempre que mi componente necesite ejecutar de las acciones, con esto se ejecuta la accion que va actualizar el estado, que queda en store\r\n\r\n    useEffect(() => { //para ejecutar algo apenas se inicie(montar)/actualice el componente\r\n        dispatch(pokemonsTypes())\r\n        dispatch(allPokemons(filters)) // esto me va a ejcutar la accion, va ahcer la peticion al back\r\n    }, [dispatch, filters])\r\n\r\n    let pokemons = useSelector(store => store.pokemons) // el useSelector me sirve para especificar lo que estoy pidiendo, y este me permite traeme de la store la info a mi componente , esto funciona solo con el estado GLOBALL\r\n    let types = useSelector(store => store.pokemonsTypes)\r\n    let loading = useSelector(store => store.loading)\r\n\r\n\r\n\r\n    const handleFilters = (event) => {// funcion que se asume maneja el evento de algun input\r\n        const property = event.target.name\r\n        setFilters({// para actualizar el estado\r\n            ...filters, // hacemos una copia del estado anterior\r\n            [property]: event.target.value // event.target.value es db o api,name o los otros filtros\r\n\r\n        })\r\n    }\r\n\r\n    const handleSorting = (event) => {\r\n        let newValue = event.target.value.split(\"_\") // aaqui estoy separando el value por el _ para asi asginara sus respectivos valores [ atacck,desc]\r\n        setFilters({\r\n            ...filters, // y aqui nuevamente lo actualizamos\r\n            orderBy: newValue[0],\r\n            order: newValue[1]\r\n        })\r\n\r\n    }\r\n\r\n    const handlePage = (i) => {\r\n        setFilters({\r\n            ...filters,\r\n            page: i\r\n        })\r\n    }\r\n\r\n    // aqui debe ir paginado y filtros y la lista de todos\r\n    return (\r\n        <div className=\"home\">\r\n            <div className='filters-contain'>\r\n                <select name=\"source\" id=\"sr\" onChange={handleFilters}>\r\n                    <option>Choose a filter</option>\r\n                    <option value=\"db\">Date base</option>\r\n                    <option value=\"api\">Api</option>\r\n                </select>\r\n                <select name=\"sort\" onChange={handleSorting}>\r\n                    <option>Sort by</option>\r\n                    <option value=\"attack_desc\">Attack desc</option>\r\n                    <option value=\"attack_asc\">Attack asc</option>\r\n                    <option value=\"name_desc\">Name desc</option>\r\n                    <option value=\"name_asc\">Name asc</option>\r\n                </select>\r\n                <select name=\"type\" onChange={handleFilters}>\r\n                    <option>Choose a type</option>\r\n                    {types.map(e => <option value={e.name}>{e.name}</option>)}\r\n                </select>\r\n\r\n                <input type='string' placeholder='Search for name ' name='name' onKeyDown={(e) => e.key === \"Enter\" && handleFilters(e)}></input>\r\n                <button className='click-button' onClick={() => setFilters(initialState)}><img src=\"/cleaning.png\" alt=\"clean\" /> </button>\r\n            </div>\r\n\r\n\r\n            <img className='logo-pokemon' src=\"/logo.png\" alt=\"logo\" />\r\n            {\r\n                // pokemons?.data.length === 0 ? window.alert(\"pokemon not found\") :\r\n                loading ?\r\n                    <div>\r\n                        <div class=\"loadingio-spinner-rolling-hciydlsv51p\"><div class=\"ldio-os8kw4pbboh\">\r\n                            <div></div>\r\n                        </div></div>\r\n                    </div>\r\n                    :\r\n                    <div>\r\n                        {pokemons.data?.length === 0 && <div>Pokemons not found</div>}\r\n                        <div className='card-contain'>\r\n                            {pokemons.data?.map(i =>\r\n                                <PokemonCard\r\n                                    key={i.id}\r\n                                    id={i.id}\r\n                                    name={i.name}\r\n                                    type={i.type}\r\n                                    img={i.img}\r\n                                />\r\n                            )\r\n                            }\r\n                        </div>\r\n                        <div className='paginado'>\r\n                            {\r\n                                Array(pokemons.totalPages).fill().map((e, i) => (\r\n                                    <button onClick={() => handlePage(i + 1)}>{i + 1}</button>\r\n                                ))\r\n                            }\r\n                        </div>\r\n                    </div>\r\n            }\r\n        </div>\r\n\r\n    )\r\n}\r\n\r\nexport default Home;","\r\nimport React, { useEffect } from 'react'\r\nimport { useDispatch, useSelector } from 'react-redux'\r\nimport { pokemonsId } from \"../../redux/actions\"\r\nimport \"./Details.css\";\r\n// aqui vamos a manejar lo de la ruta del ID\r\n\r\nfunction Details(props) {\r\n    const id = props.match.params.id\r\n    const dispatch = useDispatch(); //estoy guardando en la variable dispatch la funcion de UseDispacth para poder usarla, esto siempre que mi componente necesite ejecutar de las acciones, con esto se ejecuta la accion que va actualizar el estado, que queda en store\r\n\r\n    useEffect(() => { //para ejecutar algo apenas se inicie(montar)/actualice el componente\r\n        dispatch(pokemonsId(id)) // esto me va a ejcutar la accion, va ahcer la peticion al back\r\n    }, [dispatch, id])\r\n\r\n    let pokemonDetail = useSelector(store => store.pokemonsId) // PARA ACCEDER AL ESTADO, PARA TRAER LA INFO A MI COMPONENTE\r\n\r\n    return ( // me faltan los types, porque es un arreglo\r\n        <div className='all-details-container'>\r\n            <div className='contain-details'>\r\n                <h1>{pokemonDetail.name}</h1>\r\n                <div>\r\n                    <h3>Hp: {pokemonDetail.hp}</h3>\r\n                    <h3>Height: {pokemonDetail.height}</h3>\r\n                </div>\r\n                <div>\r\n                    <h3>Attack: {pokemonDetail.attack}</h3>\r\n                    <h3>Defense: {pokemonDetail.defense}</h3>\r\n                </div>\r\n                <div>\r\n                    <h3>Speed: {pokemonDetail.speed}</h3>\r\n                    <h3>Weigth: {pokemonDetail.weight}</h3>\r\n                </div>\r\n                <h3 className='types'>Type: {\r\n                    pokemonDetail.type?.map(e=>(<div>{e}</div>))}</h3>\r\n            </div>\r\n            <div className='img-each-pk'> <img src={pokemonDetail.img} alt=\"detail\" />\r\n            </div>\r\n        </div>\r\n\r\n    )\r\n}\r\n\r\n\r\n\r\nexport default Details","import React from \"react\";\r\nimport { useDispatch, useSelector } from \"react-redux\";\r\nimport * as actions from \"../../redux/actions\";\r\nimport { useState, useEffect } from \"react\";\r\nimport \"./create.css\";\r\n\r\n\r\n\r\nconst CreatePokemons = () => {\r\n    const dispatch = useDispatch();\r\n\r\n    let valoresNumeros = [\"hp\", \"attack\", \"defense\", \"speed\", \"height\", \"weight\"] //creo un array con las propiedades que tienen values integer\r\n\r\n    const [create, setCreate] = useState({ // creando un estado con unos valores iniciales en 0 y vacio\r\n        name: \"\",\r\n        hp: 0,\r\n        type: [],\r\n        attack: 0,\r\n        defense: 0,\r\n        speed: 0,\r\n        height: 0,\r\n        weight: 0\r\n    })\r\n\r\n    const update = (event) => {  // funcion encargada de actualizar los values en el estado\r\n        const property = event.target.name // creo una variable donde guardo el  campo name que saque del fprmulario\r\n        let value = event.target.value // lo mismo q arriba\r\n\r\n        setCreate({ // esto actualiza mi estado\r\n            ...create, // aqui hago una copia del contenido del estado\r\n            [property]: value // actualizo este campo en especifico\r\n        })\r\n\r\n        if (valoresNumeros.includes(property)) { // esto lo hago para que cada value integer siempre sea entero\r\n            value = Number(value)\r\n            if (areNumberValuesInvalid(value, event)) return\r\n        } else {\r\n            if (areStringValuesInvalid(value, event)) return\r\n        }\r\n\r\n\r\n    }\r\n\r\n    const updateTypes = (event) => {  // funcion encargada de actualizar los values en el estado\r\n        if(create.type.length === 2) return window.alert(\"can not choose more types\")\r\n        setCreate({ // esto actualiza mi estado\r\n            ...create, // aqui hago una copia del contenido del estado\r\n            type: [...create.type, event.target.value] // actualizo este campo en especifico\r\n        })\r\n    }\r\n\r\n    const submitCreate = (event) => {\r\n        event.preventDefault(); // esto para que cuando le de submit no se me borre\r\n        if (isFormUnfilled()) return // este return es para que no continue con lo de abajo y muera en esta linea\r\n        dispatch(actions.createPokemons(create))\r\n    }\r\n    // las validaciones del formulario\r\n    const areNumberValuesInvalid = (value, event) => {\r\n        if (value < 1) {\r\n            window.alert(\"field must be greater than 0\")\r\n            event.target.focus()\r\n            return true\r\n        }\r\n\r\n        if (value > 10000) {\r\n            window.alert(\"field must be less than 10000\")\r\n            event.target.focus()\r\n            return true\r\n        } return false\r\n    }\r\n\r\n    const areStringValuesInvalid = (value, event) => {\r\n        if (value === \"\") {\r\n            window.alert(\"field can not be empty\")\r\n            event.target.focus()\r\n            return true\r\n        }\r\n        if (!isNaN(+value)) {\r\n            window.alert(\"field can not be a number\")\r\n            event.target.focus()\r\n            return true\r\n        }\r\n        if (value.length > 15) {\r\n            window.alert(\"field must not be longer than 15 characters\")\r\n            event.target.focus()\r\n            return true\r\n        } return false\r\n    }\r\n\r\n    const isFormUnfilled = () => {\r\n        const initialCreateObject = { // creando un estado con unos valores iniciales en 0 y vacio,est es mi estado vacio\r\n            name: \"\",\r\n            hp: 0,\r\n            type: [],\r\n            attack: 0,\r\n            defense: 0,\r\n            speed: 0,\r\n            height: 0,\r\n            weight: 0\r\n        }\r\n        if (JSON.stringify(create) === JSON.stringify(initialCreateObject)) { //JSON.stringify, convierte un objeto en string para poder comparar su contenido\r\n            window.alert(\"can not create the pokemon, please fill the form\")\r\n            return true\r\n        } return window.alert(\"pokemon creado exitosamente\")\r\n    }\r\n\r\n\r\n\r\n    //\r\n    useEffect(() => { //para ejecutar algo apenas se inicie(montar)/actualice el componente\r\n        dispatch(actions.pokemonsTypes()) // esto me va a ejcutar la accion, va ahcer la peticion al back\r\n    }, [dispatch])\r\n\r\n    let type = useSelector(store => store.pokemonsTypes) // esto es mi array de tipos \r\n\r\n\r\n    return (\r\n        <div className=\"formulario\">\r\n            <img className='logo-pokemon' src=\"/logo.png\" alt=\"logo\" />\r\n\r\n            <form className=\"entries-create\" onSubmit={submitCreate}>\r\n                <div className=\"namehp\">\r\n                    <div className=\"create-input-container\">\r\n                        <label htmlFor=\"name\">Name: </label>\r\n                        <input type='text' style={{ width: \"100px\" }} name='name' value={create.name} onChange={update} required></input>\r\n                    </div>\r\n\r\n                    <div className=\"create-input-container\">\r\n                        <label htmlFor=\"hp\">Hp: </label>\r\n                        <input type='number' style={{ width: \"100px\" }} min=\"1\" max=\"300\" name='hp' value={create.hp} onChange={update} required></input>\r\n                    </div>\r\n                </div>\r\n\r\n                <div className=\"namehp\">\r\n                    <div className=\"create-input-container\">\r\n                        <label htmlFor=\"attack\">Attack: </label>\r\n                        <input type='number' style={{ width: \"100px\" }} min=\"1\" max=\"300\" name='attack' value={create.attack} onChange={update} required></input>\r\n                    </div>\r\n\r\n                    <div className=\"create-input-container\">\r\n                        <label htmlFor=\"defense\">Defense: </label>\r\n                        <input type='number' style={{ width: \"100px\" }} min=\"1\" max=\"300\" name='defense' value={create.defense} onChange={update} required></input>\r\n                    </div>\r\n                </div>\r\n\r\n                <div className=\"namehp\">\r\n                    <div className=\"create-input-container\">\r\n                        <label htmlFor=\"speed\">Speed: </label>\r\n                        <input type='number' style={{ width: \"100px\" }} min=\"1\" max=\"300\" name='speed' value={create.speed} onChange={update} required></input>\r\n                    </div>\r\n\r\n                    <div className=\"create-input-container\">\r\n                        <label htmlFor=\"weight\">Weight: </label>\r\n                        <input type='number' style={{ width: \"100px\" }} min=\"1\" max=\"300\" name='weight' value={create.weight} onChange={update} required></input>\r\n                    </div>\r\n                </div>\r\n\r\n                <div className=\"namehp\">\r\n                    <div className=\"create-input-container\">\r\n                        <label htmlFor=\"height\">Height:  </label>\r\n                        <input type='number' style={{ width: \"100px\" }} min=\"1\" max=\"300\" name='height' value={create.height} onChange={update} required></input>\r\n                    </div>\r\n\r\n                    <div className=\"create-input-container\">\r\n                        <label for=\"sl\">Choose a type</label>\r\n                        <select className=\"choosetypes\" name=\"types[]\" style={{ width: \"100px\" }} id=\"sl\" onChange={updateTypes} required>\r\n                            <option></option>\r\n                            {type.map(i => (\r\n                                <option key={i.id} value={i.id}>{i.name} </option>\r\n                            ))}\r\n                        </select>\r\n                    </div>\r\n                </div>\r\n\r\n                <div className=\"pokemon-types-card\">\r\n                    {type.map(e => create.type.includes(String(e.id)) && <div className=\"each-type\">{e.name}</div>)}\r\n                </div>\r\n\r\n\r\n                <button className=\"create-button\" type=\"submit\">Create</button>\r\n            </form>\r\n        </div>\r\n    );\r\n};\r\n\r\n\r\nexport default CreatePokemons;","import React from \"react\";\r\nimport \"./landing.css\";\r\n\r\nconst Landingpage = () => {\r\n    return (\r\n        <div className=\"landing\">\r\n            <img className='pokemones' src=\"/pokemones.png\" alt=\"pk\" />\r\n            <br></br>\r\n            <h1 className=\"welcome\">Discover the world of pokemon</h1>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Landingpage;","import React from 'react'\r\nimport { Link } from 'react-router-dom'\r\nimport \"./NavBar.css\"\r\nfunction NavBar() {\r\n  return (\r\n    <div className='nav-bar'>\r\n        <Link to =\"/home\">HOME</Link>\r\n        <Link to =\"/create\">CREATE POKEMON</Link>\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default NavBar","import './App.css';\nimport { Route } from \"react-router-dom\"; // nos permite tener todas las rutas\nimport Home from './pages/Home/Home';\nimport Details from './pages/Details/Details';\nimport Create from \"./pages/Create/Create\";\nimport Landingpage from './pages/Landingpage/Landingpage';\nimport NavBar from './components/NavBar/NavBar';\n// import axios from \"axios\";\n// axios.defaults.baseURL= \"http://localhost:3001\" // otra forma de ahorrarse espacio en las actions \n// archivo que se encarga de usar todas las rutas, los states y renderizar las pages\n\n// deberi poner /types aqui??? como lo pongo?\nfunction App() {\n  return (\n    <div>\n      <Route path=\"/\" component={NavBar} />\n      <Route exact path=\"/home\" component={Home} />\n      <Route exact path=\"/details/:id\" component={Details} />\n      <Route exact path=\"/create\" component={Create} />\n      <Route exact path=\"/\" component={Landingpage} />\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","// debo importar las actions aqui\r\nimport { GET_POKEMONS, GET_POKEMONS_ID, GET_POKEMONS_TYPES, POST_POKEMONS, LOADING } from \"../actions\";\r\n// aaqui modifico el estado segun la accion que quiera ( todos los pokemones, o por el nombre)\r\n\r\n\r\nconst initialState = {// estado global que voy a poder acceder desde cualquier parte de mi app\r\n    pokemons: {},\r\n    pokemonsId: {},\r\n    pokemonsTypes: [],\r\n    createdPokemon: {},\r\n    loading: false\r\n};\r\n\r\n\r\nconst rootReducer = (state = initialState, action) => { // se encarga de modificar nuestro estado\r\n    switch (action.type) {\r\n        // Acá va tu código:\r\n        case GET_POKEMONS: // esto me lo da las actions para llenar mi store\r\n            return {\r\n                ...state,\r\n                pokemons: action.payload // es la info que traje del backend\r\n            }\r\n        case GET_POKEMONS_ID:\r\n            return {\r\n                ...state,\r\n                pokemonsId: action.payload\r\n            }\r\n        case GET_POKEMONS_TYPES:\r\n            return {\r\n                ...state,\r\n                pokemonsTypes: action.payload\r\n            }\r\n        case POST_POKEMONS:\r\n            return {\r\n                ...state,\r\n                // que iria aqui? que me devulve cuando creo un pokemon?\r\n                createdPokemon: action.payload\r\n            }\r\n        case LOADING:\r\n            return {\r\n                ...state,\r\n                loading: action.payload\r\n            }\r\n        default: return state\r\n    }\r\n\r\n};\r\n\r\nexport default rootReducer;\r\n","import { createStore, applyMiddleware, compose } from 'redux';\r\nimport thunk from 'redux-thunk';\r\nimport rootReducer from '../reducer';\r\n\r\nconst composeEnhancers =\r\n    (typeof window !== 'undefined' &&\r\n        window.__REDUX_DEVTOOLS_EXTENSION_COMPOSE__) ||\r\n    compose;\r\n\r\nconst store = createStore(\r\n    rootReducer,\r\n    composeEnhancers(applyMiddleware(thunk)),\r\n);\r\n\r\nexport default store;\r\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\nimport { BrowserRouter } from \"react-router-dom\";\nimport store from \"./redux/store/index\";\nimport { Provider } from \"react-redux\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <Provider store={store}>\n      <BrowserRouter>\n        <App />\n      </BrowserRouter>\n    </Provider>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}